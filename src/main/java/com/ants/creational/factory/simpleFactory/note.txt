工厂模式：用来创建对象。
          创建者和调用者分离。
设计模式六大原则：
    1.开闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。模块应尽量在不修改原（是“原”，指原来的代码）代码的情况下进行扩展。
    2.里氏替换原则：派生类(子类)对象能够替换其基类(父类)对象被调用。
    3.依赖倒转原则：程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
    4.接口隔离原则：客户端不应该依赖它不需要的接口，类间的依赖关系应该建立在最小的接口上
    5.合成/聚合复用原则：合成/聚合复用原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的委派达到复用已有功能的目的。
                        它的设计原则是：要尽量使用合成/聚合，尽量不要使用继承。
    6.迪米特法则：直接与朋友通信，避免和陌生人通信。
                 一个软件实体应当尽可能少的与其他实体发生相互作用。类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。
 简单工厂：静态工厂方法。
           违反开闭原则，当增加接口实现类时需要修改工厂类。